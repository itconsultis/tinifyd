#!/usr/bin/env bash

set -xaeu -o pipefail

if [ ! -f ./src/.env ]; then
    cp ./src/.env.example ./src/.env
    echo "Created boilerplate .env file in src directory.\n"
    echo "********************************************************"
    echo "*** IMPORTANT: You need to modify the .env file NOW. ***"
    echo "*** Make your modifications, then re-run this script.   "
    echo "********************************************************"
    exit 0    
fi

source ./src/.env

NODE_CONTAINER=${PROJECT}_node
DB_CONTAINER=${PROJECT}_db
STORAGE_CONTAINER=${PROJECT}_storage

# wait for mysql server to start accepting queries
init_mysql () {
    echo "Waiting for MySQL server to start accepting queries..."
    while [ 0 ];
    do
        cmd="mysql -u root -p${TINIFYD_DB_PASS} -e 'SELECT \"READY\"'"
        result=$(docker exec $DB_CONTAINER bash -c "$cmd" || true)
        sleep 2

        if [[ "$result" =~ "READY" ]]; then
            break
        fi
    done

    #if [ "$ENVIRONMENT" == "local" ]; then
    #    docker exec $DB_CONTAINER bash -c "mysql -u root -p${TINIFYD_DB_PASS} -e 'SET GLOBAL general_log = 1' "
    #    docker exec $DB_CONTAINER bash -c "mysql -u root -p${TINIFYD_DB_PASS} -e 'SET GLOBAL general_log_file = \"/dev/stdout\"'"
    #fi
}


npm_tasks () {
    echo "Rebuilding npm dependencies..."
    #docker exec $NODE_CONTAINER bash -c "npm rebuild"
}


run_migrations () {
    echo "Running migrations..."
    docker exec $NODE_CONTAINER bash -c "bin/migrate up"
}


start_process () {
    echo "Starting PM2 process manager"
    docker exec $NODE_CONTAINER bash -c "bin/pm2 start .pm2.json "
}


containers_up () {
    echo "Generating docker-compose.yml"
    echo -e "# This file is auto-generated by the start script.\n---\n" > docker-compose.yml
    envsubst < docker-compose-template.yml >> docker-compose.yml
    docker-compose -f docker-compose.yml -p $PROJECT up -d
}


fix_timezones () {
    containers="$NODE_CONTAINER $DB_CONTAINER"
    for container in $containers; do
        docker exec $container bash -c "echo \"$TIMEZONE\" > /etc/timezone"
        docker exec $container bash -c "dpkg-reconfigure -f noninteractive tzdata"
    done
}


containers_up
fix_timezones
npm_tasks
init_mysql
run_migrations
start_process
tail -f logs/pm2/*.log

